{"entries":[{"timestamp":1758627054521,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":8299,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"n$udZO.+Y~H)aAfQfa,s\">Avg Temp</variable></variables><block type=\"radio_on_number_drag\" x=\"232\" y=\"-178\"><value name=\"HANDLER_DRAG_PARAM_receivedNumber\"><block type=\"argument_reporter_number\" deletable=\"false\"><mutation localizationname=\"radio.onReceivedNumber|handlerParam|receivedNumber\"></mutation><field name=\"VALUE\">receivedNumber</field></block></value><statement name=\"HANDLER\"><block type=\"variables_change\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">Avg Temp</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"NUM\">1</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><mutation localizationname=\"radio.onReceivedNumber|handlerParam|receivedNumber\"></mutation><field name=\"VALUE\">receivedNumber</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></value></block></statement></block><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation elseif=\"1\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">30</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">!!!</field></shadow></value><next><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">294</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></shadow></value><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">!!!</field></shadow></value><next><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">131</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></shadow><block type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">294</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></block></value><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value></block></statement></block></statement></block><block type=\"every_interval\" x=\"566\" y=\"-2\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">3600000</field></shadow></value><statement name=\"HANDLER\"><block type=\"controls_repeat_ext\"><value name=\"TIMES\"><shadow type=\"math_whole_number\"><field name=\"NUM\">3</field></shadow></value><statement name=\"DO\"><block type=\"music_playable_play_default_bkg\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"device_builtin_melody_playable\"><field name=\"melody\">Melodies.BaDing</field></shadow></value><next><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">DrinkWater</field></shadow></value></block></next></block></statement></block></statement></block><block type=\"device_button_event\" x=\"1039\" y=\"142\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value></block></statement></block><block type=\"device_button_event\" x=\"586\" y=\"261\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">Avg Temp</field></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"640\" y=\"424\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">Avg Temp</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"radio_set_group\"><value name=\"ID\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"255\" label=\"Id\" precision=\"0\"></mutation><field name=\"SLIDER\">21</field></shadow></value><next><block type=\"radio_datagram_send\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value></block></next></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":3090,"diffs":[[1,"radio.onReceivedNumber(function (receivedNumber) {\n    Avg_Temp += input.temperature() + receivedNumber / 2\n})\ninput.onButtonPressed(Button.A, function () {\n    basic.showNumber(input.temperature())\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.showNumber(Avg_Temp)\n})\nlet Avg_Temp = 0\nAvg_Temp = 0\nradio.setGroup(21)\nradio.sendNumber(input.temperature())\nbasic.forever(function () {\n    if (input.temperature() > 30) {\n        basic.showString(\"!!!\")\n        music.play(music.tonePlayable(294, music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone)\n        pins.digitalWritePin(DigitalPin.P1, 1)\n    } else if (input.temperature() < 3) {\n        basic.showString(\"!!!\")\n        music.play(music.tonePlayable(294, music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone)\n        pins.digitalWritePin(DigitalPin.P1, 1)\n    } else {\n        pins.digitalWritePin(DigitalPin.P1, 0)\n"]]},{"start1":911,"length1":7628,"diffs":[[1,""]]},{"start1":914,"length1":1156,"diffs":[[1,"loops.everyInterval(3600000, function () {\n    for (let index = 0; index < 3; index++) {\n        music._playDefaultBackground(music.builtInPlayableMelody(Melodies.BaDing), music.PlaybackMode.InBackground)\n        basic.showString(\"DrinkWater\")\n"]]},{"start1":1164,"length1":1523,"diffs":[[1,"})\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":141,"diffs":[[1,"    \"name\": \"ALT 4 test\",\n    \"description\": \"\",\n"]]},{"start1":116,"length1":85,"diffs":[[1,"        \"microphone\": \"*\"\n"]]},{"start1":206,"length1":39,"diffs":[[1,"        \"README.md\"\n"]]},{"start1":487,"length1":316,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"added","filename":"main.py","value":"# Mode 0 = send\n# Mode 1 = receive\n\ndef on_button_pressed_a():\n    basic.show_number(input.temperature())\ninput.on_button_pressed(Button.A, on_button_pressed_a)\n\ndef on_button_pressed_b():\n    basic.show_number(avg_temp)\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\ndef on_received_value(name, value):\n    global avg_temp\n    allowedNames = [\"temperature\", \"upperLimit\", \"lowerLimit\"]\n    if mode == 1:\n        basic.show_string(\"Invalid values received!\")\n        return\n    if allowedNames[name] and (value == 0 or value == None or value == None):\n        return\n    avg_temp += input.temperature() + value / 2\nradio.on_received_value(on_received_value)\n\navg_temp = 0\nmode = 0\nmode = 0\navg_temp = 0\nradio.set_group(21)\nradio.send_number(input.temperature())\n\ndef on_forever():\n    if input.temperature() > 30:\n        basic.show_string(\"!!!\")\n        music.play(music.tone_playable(294, music.beat(BeatFraction.WHOLE)),\n            music.PlaybackMode.UNTIL_DONE)\n        pins.digital_write_pin(DigitalPin.P1, 1)\n    elif input.temperature() < 3:\n        basic.show_string(\"!!!\")\n        music.play(music.tone_playable(294, music.beat(BeatFraction.WHOLE)),\n            music.PlaybackMode.UNTIL_DONE)\n        pins.digital_write_pin(DigitalPin.P1, 1)\n    else:\n        pins.digital_write_pin(DigitalPin.P1, 0)\nbasic.forever(on_forever)\n\ndef on_every_interval():\n    for index in range(3):\n        music._play_default_background(music.built_in_playable_melody(Melodies.BA_DING),\n            music.PlaybackMode.IN_BACKGROUND)\n        basic.show_string(\"DrinkWater\")\nloops.every_interval(3600000, on_every_interval)\n"}]},{"timestamp":1759145960339,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":190,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"n$udZO.+Y~H)aAfQfa,s\">avg_temp</variable><variable id=\"mdFBC0RVj{7%XMr1qY~G\">mode</variable></variables><block type=\"radio_on_value_drag\" x=\"-7\" y=\"-582\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\" deletable=\"false\"><mutation localizationname=\"radio.onReceivedValue|handlerParam|name\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\" deletable=\"false\"><mutation localizationname=\"radio.onReceivedValue|handlerParam|value\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"mdFBC0RVj{7%XMr1qY~G\">mode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"break_keyword\"></block></statement><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_string\"><mutation localizationname=\"radio.onReceivedValue|handlerParam|name\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><next><block type=\"variables_change\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">avg_temp</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><mutation localizationname=\"radio.onReceivedValue|handlerParam|value\"></mutation><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></value></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"566\" y=\"-2\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">3600000</field></shadow></value><statement name=\"HANDLER\"><block type=\"controls_repeat_ext\"><value name=\"TIMES\"><shadow type=\"math_whole_number\"><field name=\"NUM\">3</field></shadow></value><statement name=\"DO\"><block type=\"music_playable_play_default_bkg\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"device_builtin_melody_playable\"><field name=\"melody\">Melodies.BaDing</field></shadow></value><next><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">DrinkWater</field></shadow></value></block></next></block></statement></block></statement></block><block type=\"device_forever\" x=\"24\" y=\"50\"><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation elseif=\"1\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">30</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">!!!</field></shadow></value><next><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">294</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></shadow></value><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">!!!</field></shadow></value><next><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">131</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></shadow><block type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">294</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></block></value><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value></block></statement></block></statement></block><block type=\"device_button_event\" x=\"1039\" y=\"142\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value></block></statement></block><block type=\"device_button_event\" x=\"608\" y=\"273\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">avg_temp</field></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"629\" y=\"504\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"mdFBC0RVj{7%XMr1qY~G\">mode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">avg_temp</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"radio_set_group\"><value name=\"ID\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"255\" label=\"Id\" precision=\"0\"></mutation><field name=\"SLIDER\">21</field></shadow></value><next><block type=\"radio_datagram_send\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value></block></next></block></next></block></next></block></statement></block></xml>"]]}]}]},{"timestamp":1759146344457,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":403,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1758627054520,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"n$udZO.+Y~H)aAfQfa,s\">Avg Temp</variable></variables><block type=\"radio_on_number_drag\" x=\"232\" y=\"-178\"><value name=\"HANDLER_DRAG_PARAM_receivedNumber\"><block type=\"argument_reporter_number\" deletable=\"false\"><mutation localizationname=\"radio.onReceivedNumber|handlerParam|receivedNumber\"></mutation><field name=\"VALUE\">receivedNumber</field></block></value><statement name=\"HANDLER\"><block type=\"variables_change\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">Avg Temp</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"NUM\">1</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><mutation localizationname=\"radio.onReceivedNumber|handlerParam|receivedNumber\"></mutation><field name=\"VALUE\">receivedNumber</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></value></block></statement></block><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation elseif=\"1\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">30</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">!!!</field></shadow></value><next><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">294</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></shadow></value><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">!!!</field></shadow></value><next><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">131</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></shadow><block type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">294</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></block></value><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value></block></statement></block></statement></block><block type=\"every_interval\" x=\"566\" y=\"-2\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">3600000</field></shadow></value><statement name=\"HANDLER\"><block type=\"controls_repeat_ext\"><value name=\"TIMES\"><shadow type=\"math_whole_number\"><field name=\"NUM\">3</field></shadow></value><statement name=\"DO\"><block type=\"music_playable_play_default_bkg\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"device_builtin_melody_playable\"><field name=\"melody\">Melodies.BaDing</field></shadow></value><next><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">DrinkWater</field></shadow></value></block></next></block></statement></block></statement></block><block type=\"device_button_event\" x=\"1039\" y=\"142\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value></block></statement></block><block type=\"device_button_event\" x=\"586\" y=\"261\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">Avg Temp</field></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"640\" y=\"424\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">Avg Temp</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"radio_set_group\"><value name=\"ID\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"255\" label=\"Id\" precision=\"0\"></mutation><field name=\"SLIDER\">21</field></shadow></value><next><block type=\"radio_datagram_send\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value></block></next></block></next></block></statement></block></xml>","main.ts":"","README.md":"","pxt.json":"{\n    \"name\": \"ALT 4 test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.16\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/70751e3ce10c755c0c803f5669b12b52539ce5b0\",\n        \"target\": \"8.0.16\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1758628889147,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"n$udZO.+Y~H)aAfQfa,s\">avg_temp</variable><variable id=\"mdFBC0RVj{7%XMr1qY~G\">mode</variable></variables><block type=\"radio_on_value_drag\" x=\"-7\" y=\"-582\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\" deletable=\"false\"><mutation localizationname=\"radio.onReceivedValue|handlerParam|name\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\" deletable=\"false\"><mutation localizationname=\"radio.onReceivedValue|handlerParam|value\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"mdFBC0RVj{7%XMr1qY~G\">mode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"break_keyword\"></block></statement><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_string\"><mutation localizationname=\"radio.onReceivedValue|handlerParam|name\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><next><block type=\"variables_change\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">avg_temp</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><mutation localizationname=\"radio.onReceivedValue|handlerParam|value\"></mutation><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></value></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"566\" y=\"-2\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">3600000</field></shadow></value><statement name=\"HANDLER\"><block type=\"controls_repeat_ext\"><value name=\"TIMES\"><shadow type=\"math_whole_number\"><field name=\"NUM\">3</field></shadow></value><statement name=\"DO\"><block type=\"music_playable_play_default_bkg\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"device_builtin_melody_playable\"><field name=\"melody\">Melodies.BaDing</field></shadow></value><next><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">DrinkWater</field></shadow></value></block></next></block></statement></block></statement></block><block type=\"device_forever\" x=\"24\" y=\"50\"><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation elseif=\"1\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">30</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">!!!</field></shadow></value><next><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">294</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></shadow></value><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">!!!</field></shadow></value><next><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">131</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></shadow><block type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">294</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></block></value><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value></block></statement></block></statement></block><block type=\"device_button_event\" x=\"1039\" y=\"142\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value></block></statement></block><block type=\"device_button_event\" x=\"608\" y=\"273\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">avg_temp</field></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"629\" y=\"504\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"mdFBC0RVj{7%XMr1qY~G\">mode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">avg_temp</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"radio_set_group\"><value name=\"ID\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"255\" label=\"Id\" precision=\"0\"></mutation><field name=\"SLIDER\">21</field></shadow></value><next><block type=\"radio_datagram_send\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"//  Mode 0 = send\n//  Mode 1 = receive\n\n// Error handling\nconst errorCodes = {\n    // Modes\n    mode: {\n        0: \"Value was received but mode was incorrect to perform operation (Mode 0)\",\n        1: \"Invalid values were received (Mode 1)\"        \n    }\n}\n\ndatalogger.setColumns(\n    [\n        // Temperature\n        \"Temperature (°C) - Input\", \n        \"Temperature (°C) - Received\",\n\n        // Avg. Temp\n        \"Avg. Temperature (°C) - Input\",\n        \"Avg. Temperature (°C) - Received\",\n\n        // Errors\n        \"isError\", \n        \"Error\"\n    ]\n);\n\ninput.onButtonPressed(Button.A, function on_button_pressed_a() {\n    basic.showNumber(input.temperature())\n})\n\ninput.onButtonPressed(Button.B, function on_button_pressed_b() {\n    basic.showNumber(avg_temp)\n})\n\nradio.onReceivedValue(function on_received_value(name: string, value: number) {\n    let allowedNames: { [key: string]: any } = [\"temperature\", \"upperLimit\", \"lowerLimit\"];\n    // If mode is 0 (ie. send mode), silently fail and log the event.\n    if (mode == 0) {\n        datalogger.logData([\n            datalogger.createCV(\"isError\", true),\n            datalogger.createCV(\"error\", errorCodes.mode[0])\n        ]);\n        return\n    }\n    \n    // If the mode is correct but the values are wrong, e.g. empty, then return an error to the user.\n    if (allowedNames[name] && (value == 0 || value == null || value == null)) {\n        datalogger.logData([\n            datalogger.createCV(\"isError\", true),\n            datalogger.createCV(\"error\", errorCodes.mode[1])\n        ]);     \n        // Show an error to the user   \n        basic.showLeds(`\n            . # # # .\n            . . . . #\n            . . # # .\n            . . . . .\n            . . # . .\n        `, 3000)\n        return\n    }\n    \n    avg_temp += input.temperature() + value / 2\n\n    datalogger.logData([\n        datalogger.createCV(\"Temperature (°C) - Received\", value),\n        datalogger.createCV(\"Avg. Temperature (°C) - Received\", value),\n    ]);\n})\n\nlet avg_temp = 0\nlet mode = 0\nmode = 0\navg_temp = 0\n\nradio.setGroup(21)\nradio.sendNumber(input.temperature())\n\nbasic.forever(function on_forever() {\n    if (input.temperature() > 30) {\n        basic.showString(\"!!!\")\n        music.play(music.tonePlayable(294, music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone)\n        pins.digitalWritePin(DigitalPin.P1, 1)\n    } else if (input.temperature() < 3) {\n        basic.showString(\"!!!\")\n        music.play(music.tonePlayable(294, music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone)\n        pins.digitalWritePin(DigitalPin.P1, 1)\n    } else {\n        pins.digitalWritePin(DigitalPin.P1, 0)\n    }\n    \n})\n\nloops.everyInterval(3600000, function on_every_interval() {\n    for (let index = 0; index < 3; index++) {\n        music._playDefaultBackground(music.builtInPlayableMelody(Melodies.BaDing), music.PlaybackMode.InBackground)\n        basic.showString(\"DrinkWater\")\n    }\n})","README.md":"","main.py":"# Mode 0 = send\n# Mode 1 = receive\n\ndef on_button_pressed_a():\n    basic.show_number(input.temperature())\ninput.on_button_pressed(Button.A, on_button_pressed_a)\n\ndef on_button_pressed_b():\n    basic.show_number(avg_temp)\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\ndef on_received_value(name, value):\n    global avg_temp\n    allowedNames = [\"temperature\", \"upperLimit\", \"lowerLimit\"]\n    if mode == 1:\n        basic.show_string(\"Invalid values received!\")\n        return\n    if allowedNames[name] and (value == 0 or value == None or value == None):\n        return\n    avg_temp += input.temperature() + value / 2\nradio.on_received_value(on_received_value)\n\navg_temp = 0\nmode = 0\nmode = 0\navg_temp = 0\nradio.set_group(21)\nradio.send_number(input.temperature())\n\ndef on_forever():\n    if input.temperature() > 30:\n        basic.show_string(\"!!!\")\n        music.play(music.tone_playable(294, music.beat(BeatFraction.WHOLE)),\n            music.PlaybackMode.UNTIL_DONE)\n        pins.digital_write_pin(DigitalPin.P1, 1)\n    elif input.temperature() < 3:\n        basic.show_string(\"!!!\")\n        music.play(music.tone_playable(294, music.beat(BeatFraction.WHOLE)),\n            music.PlaybackMode.UNTIL_DONE)\n        pins.digital_write_pin(DigitalPin.P1, 1)\n    else:\n        pins.digital_write_pin(DigitalPin.P1, 0)\nbasic.forever(on_forever)\n\ndef on_every_interval():\n    for index in range(3):\n        music._play_default_background(music.built_in_playable_melody(Melodies.BA_DING),\n            music.PlaybackMode.IN_BACKGROUND)\n        basic.show_string(\"DrinkWater\")\nloops.every_interval(3600000, on_every_interval)\n","pxt.json":"{\n    \"name\": \"ALT 4 test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.16\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/70751e3ce10c755c0c803f5669b12b52539ce5b0\",\n        \"target\": \"8.0.16\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1758888092120,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"n$udZO.+Y~H)aAfQfa,s\">avg_temp</variable><variable id=\"mdFBC0RVj{7%XMr1qY~G\">mode</variable></variables><block type=\"radio_on_value_drag\" x=\"-7\" y=\"-582\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\" deletable=\"false\"><mutation localizationname=\"radio.onReceivedValue|handlerParam|name\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\" deletable=\"false\"><mutation localizationname=\"radio.onReceivedValue|handlerParam|value\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"mdFBC0RVj{7%XMr1qY~G\">mode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"break_keyword\"></block></statement><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_string\"><mutation localizationname=\"radio.onReceivedValue|handlerParam|name\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><next><block type=\"variables_change\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">avg_temp</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><mutation localizationname=\"radio.onReceivedValue|handlerParam|value\"></mutation><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></value></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"566\" y=\"-2\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">3600000</field></shadow></value><statement name=\"HANDLER\"><block type=\"controls_repeat_ext\"><value name=\"TIMES\"><shadow type=\"math_whole_number\"><field name=\"NUM\">3</field></shadow></value><statement name=\"DO\"><block type=\"music_playable_play_default_bkg\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"device_builtin_melody_playable\"><field name=\"melody\">Melodies.BaDing</field></shadow></value><next><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">DrinkWater</field></shadow></value></block></next></block></statement></block></statement></block><block type=\"device_forever\" x=\"24\" y=\"50\"><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation elseif=\"1\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">30</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">!!!</field></shadow></value><next><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">294</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></shadow></value><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">!!!</field></shadow></value><next><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">131</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></shadow><block type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">294</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></block></value><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value></block></statement></block></statement></block><block type=\"device_button_event\" x=\"1039\" y=\"142\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value></block></statement></block><block type=\"device_button_event\" x=\"608\" y=\"273\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">avg_temp</field></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"629\" y=\"504\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"mdFBC0RVj{7%XMr1qY~G\">mode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">avg_temp</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"radio_set_group\"><value name=\"ID\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"255\" label=\"Id\" precision=\"0\"></mutation><field name=\"SLIDER\">21</field></shadow></value><next><block type=\"radio_datagram_send\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"//  Mode 0 = send\n//  Mode 1 = receive\n\n// Error handling\nconst errors = {\n    // Modes\n    mode: {\n        0: \"Value was received but mode was incorrect to perform operation (Mode 0)\",\n        1: \"Invalid values were received (Mode 1)\",\n        2: \"Data has not been received - please wait\"\n    }\n}\n\ndatalogger.setColumns(\n    [\n        // Temperature\n        \"Temperature (°C) - Input\", \n        \"Temperature (°C) - Received\",\n\n        // upperLimit\n        \"Upper Limit - Input\",\n        \"Upper Limit - Received\",\n\n        // lowerLimit\n        \"Lower Limit - Input\",\n        \"Lower Limit - Received\",\n\n        // Avg. Temp\n        \"Avg. Temperature (°C) - Input\",\n        \"Avg. Temperature (°C) - Received\",\n\n        // Errors\n        \"isError\", \n        \"Error\"\n    ]\n);\n\nlet temperature: number;\nlet upperLimit: number;\nlet lowerLimit: number;\n\nlet receivedTemperature: number;\nlet receivedUpperLimit: number;\nlet receivedLowerLimit: number;\n\nradio.onReceivedValue(function on_received_value(name: string, value: number) {\n    let allowedNames: { [key: string]: any } = [\"temperature\", \"upperLimit\", \"lowerLimit\"];\n    // If mode is 0 (ie. send mode), silently fail and log the event.\n    if (mode == 0) {\n        datalogger.logData([\n            datalogger.createCV(\"isError\", true),\n            datalogger.createCV(\"error\", errors.mode[0])\n        ]);\n        return\n    }\n    \n    // If the mode is correct but the values are wrong, e.g. empty, then return an error to the user.\n    if (allowedNames[name] && (value == 0 || value == null || value == null)) {\n        // Log the error\n        datalogger.logData([\n            datalogger.createCV(\"isError\", true),\n            datalogger.createCV(\"error\", errors.mode[1])\n        ]);\n        // Show an error to the user\n        basic.showLeds(`\n            . # # # .\n            . . . . #\n            . . # # .\n            . . . . .\n            . . # . .\n        `, 3000)\n        return\n    }\n\n    // Define values as they are received.\n    switch(name) {\n        case \"temperature\":\n            receivedTemperature = value;\n        case \"upperLimit\":\n            receivedUpperLimit = value;\n        case \"lowerLimit\":\n            receivedLowerLimit = value;\n        default:\n            break;\n    }\n\n    // If all values aren't defined, then show an error and don't continue.\n    if (!receivedTemperature || !receivedUpperLimit || !receivedLowerLimit) {\n        // Show the error to the user\n        basic.showString(errors.mode[2]);\n        // Log the error\n        datalogger.logData([\n            datalogger.createCV(\"isError\", true),\n            datalogger.createCV(\"error\", errors.mode[2])\n        ]);\n    }\n\n    // Assuming all values are present and correct, the code continues.\n\n    // Show a warning depending on temperature\n    if (receivedTemperature > receivedUpperLimit) {\n        basic.showString(\"TEMP HIGH\");\n        music.ringTone(Note.C);\n    }\n\n    if (receivedTemperature < receivedLowerLimit) {\n        basic.showString(\"TEMP LOW\");\n        music.ringTone(Note.C);\n    }\n\n    let avgTemp = (temperature + receivedTemperature) / 2;\n\n    // Log data\n    basic.showString(avgTemp);\n    datalogger.logData([\n        datalogger.createCV(\"Temperature (°C) - Received\", receivedTemperature),\n        datalogger.createCV(\"Avg. Temperature (°C) - Received\", avgTemp),\n    ]);\n})\n\nlet avg_temp = 0\nlet mode = 0\nmode = 0\navg_temp = 0\n\nradio.setGroup(21)\nradio.sendNumber(input.temperature())\n\nbasic.forever(function on_forever() {\n    if (input.temperature() > 30) {\n        basic.showString(\"!!!\")\n        music.play(music.tonePlayable(294, music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone)\n        pins.digitalWritePin(DigitalPin.P1, 1)\n    } else if (input.temperature() < 3) {\n        basic.showString(\"!!!\")\n        music.play(music.tonePlayable(294, music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone)\n        pins.digitalWritePin(DigitalPin.P1, 1)\n    } else {\n        pins.digitalWritePin(DigitalPin.P1, 0)\n    }\n    \n})\n\nloops.everyInterval(3600000, function on_every_interval() {\n    for (let index = 0; index < 3; index++) {\n        music._playDefaultBackground(music.builtInPlayableMelody(Melodies.BaDing), music.PlaybackMode.InBackground)\n        basic.showString(\"DrinkWater\")\n    }\n})","README.md":"","main.py":"# Mode 0 = send\n# Mode 1 = receive\n\ndef on_button_pressed_a():\n    basic.show_number(input.temperature())\ninput.on_button_pressed(Button.A, on_button_pressed_a)\n\ndef on_button_pressed_b():\n    basic.show_number(avg_temp)\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\ndef on_received_value(name, value):\n    global avg_temp\n    allowedNames = [\"temperature\", \"upperLimit\", \"lowerLimit\"]\n    if mode == 1:\n        basic.show_string(\"Invalid values received!\")\n        return\n    if allowedNames[name] and (value == 0 or value == None or value == None):\n        return\n    avg_temp += input.temperature() + value / 2\nradio.on_received_value(on_received_value)\n\navg_temp = 0\nmode = 0\nmode = 0\navg_temp = 0\nradio.set_group(21)\nradio.send_number(input.temperature())\n\ndef on_forever():\n    if input.temperature() > 30:\n        basic.show_string(\"!!!\")\n        music.play(music.tone_playable(294, music.beat(BeatFraction.WHOLE)),\n            music.PlaybackMode.UNTIL_DONE)\n        pins.digital_write_pin(DigitalPin.P1, 1)\n    elif input.temperature() < 3:\n        basic.show_string(\"!!!\")\n        music.play(music.tone_playable(294, music.beat(BeatFraction.WHOLE)),\n            music.PlaybackMode.UNTIL_DONE)\n        pins.digital_write_pin(DigitalPin.P1, 1)\n    else:\n        pins.digital_write_pin(DigitalPin.P1, 0)\nbasic.forever(on_forever)\n\ndef on_every_interval():\n    for index in range(3):\n        music._play_default_background(music.built_in_playable_melody(Melodies.BA_DING),\n            music.PlaybackMode.IN_BACKGROUND)\n        basic.show_string(\"DrinkWater\")\nloops.every_interval(3600000, on_every_interval)\n","pxt.json":"{\n    \"name\": \"ALT 4 test\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.16\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/70751e3ce10c755c0c803f5669b12b52539ce5b0\",\n        \"target\": \"8.0.16\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1759145960339,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"n$udZO.+Y~H)aAfQfa,s\">avg_temp</variable><variable id=\"mdFBC0RVj{7%XMr1qY~G\">mode</variable></variables><block type=\"radio_on_value_drag\" x=\"-7\" y=\"-582\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\" deletable=\"false\"><mutation localizationname=\"radio.onReceivedValue|handlerParam|name\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\" deletable=\"false\"><mutation localizationname=\"radio.onReceivedValue|handlerParam|value\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"mdFBC0RVj{7%XMr1qY~G\">mode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"break_keyword\"></block></statement><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_string\"><mutation localizationname=\"radio.onReceivedValue|handlerParam|name\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><next><block type=\"variables_change\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">avg_temp</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><mutation localizationname=\"radio.onReceivedValue|handlerParam|value\"></mutation><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></value></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"566\" y=\"-2\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">3600000</field></shadow></value><statement name=\"HANDLER\"><block type=\"controls_repeat_ext\"><value name=\"TIMES\"><shadow type=\"math_whole_number\"><field name=\"NUM\">3</field></shadow></value><statement name=\"DO\"><block type=\"music_playable_play_default_bkg\"><field name=\"playbackMode\">music.PlaybackMode.InBackground</field><value name=\"toPlay\"><shadow type=\"device_builtin_melody_playable\"><field name=\"melody\">Melodies.BaDing</field></shadow></value><next><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">DrinkWater</field></shadow></value></block></next></block></statement></block></statement></block><block type=\"device_forever\" x=\"24\" y=\"50\"><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation elseif=\"1\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">30</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">!!!</field></shadow></value><next><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">294</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></shadow></value><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">!!!</field></shadow></value><next><block type=\"music_playable_play\"><field name=\"playbackMode\">music.PlaybackMode.UntilDone</field><value name=\"toPlay\"><shadow type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">131</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></shadow><block type=\"music_tone_playable\"><value name=\"note\"><shadow type=\"device_note\"><field name=\"name\">294</field></shadow></value><value name=\"duration\"><shadow type=\"device_beat\"><field name=\"fraction\">BeatFraction.Whole</field></shadow></value></block></value><next><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"device_set_digital_pin\"><value name=\"name\"><shadow type=\"digital_pin_shadow\"><field name=\"pin\">DigitalPin.P1</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"1\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value></block></statement></block></statement></block><block type=\"device_button_event\" x=\"1039\" y=\"142\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value></block></statement></block><block type=\"device_button_event\" x=\"608\" y=\"273\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">avg_temp</field></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"629\" y=\"504\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"mdFBC0RVj{7%XMr1qY~G\">mode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"n$udZO.+Y~H)aAfQfa,s\">avg_temp</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"radio_set_group\"><value name=\"ID\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"255\" label=\"Id\" precision=\"0\"></mutation><field name=\"SLIDER\">21</field></shadow></value><next><block type=\"radio_datagram_send\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_temperature\"></block></value></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"// --------------------------------------------------------------------------------------------------------- //\n// LCCS ALT4 Project\n// Main program file\n// Description: Temperature sensor with extra features such as temperature alerts, receivers etc.\n// Language: TypeScript\n// --------------------------------------------------------------------------------------------------------- //\n\n// --------------------------------------------------------------------------------------------------------- //\n// This project uses TypeScript, a subset of the JavaScript language that supports type checking, \n// to help prevent mismatched types, e.g. passing a string instead of a number. \n\n// You will notice this when looking at functions or variables, where the type is defined afterwards, \n// e.g. `mode: 0 | 1 = 0;` essentially states that `mode` must be `0` or `1`, and is assigned `0` by default.\n// --------------------------------------------------------------------------------------------------------- //\n\n// --------------------------------------------------------------------------------------------------------- //\n// This project requires at minimum a Micro:bit of version 2 or higher.\n// Currently, as of 24/09/25, version 2 is the highest version available.\n// --------------------------------------------------------------------------------------------------------- //\n\n// --------------------------------------------------------------------------------------------------------- //\n\n// Setup radio communication\nradio.setGroup(25);\n\n// Initalise data logging\ndatalogger.setColumns(\n    [\n        // Temperature\n        \"Temperature (°C) - Input\", \n        \"Temperature (°C) - Received\",\n\n        // upperLimit\n        \"Upper Limit - Input\",\n        \"Upper Limit - Received\",\n\n        // lowerLimit\n        \"Lower Limit - Input\",\n        \"Lower Limit - Received\",\n\n        // Avg. Temp\n        \"Avg. Temperature (°C) - Input\",\n        \"Avg. Temperature (°C) - Received\",\n\n        // Errors\n        \"isError\", \n        \"Error\"\n    ]\n);\n\n// --------------------------------------------------------------------------------------------------------- //\n// Handle the mode selection\n// --------------------------------------------------------------------------------------------------------- //\n\n//  Probably should've used strings for this, but too late now.\n/**\n * *The mode the Micro:bit is in.*\n * \n * ``0``: Send\n * \n * ``1``: Receive\n * \n * *Defaults to* ``0``\n */\n\nlet mode: 0 | 1 = 0;\nlet modeSelection: boolean = true;\n\n// Since there is no flash memory support on the Micro:bit, this will be prompted at every start. \n// Unfortunately, this is unfixable.\n/**\n * Function that prompts the user to select the desired mode.\n */\nfunction modeSelect() {\n    modeSelection = true;\n    basic.showString(\"A=Send B=Recv\");\n}\n\n// Handle Button A press for Mode 0\ninput.onButtonPressed(Button.A, function() {\n    if (modeSelection === true) {\n        basic.clearScreen();\n        modeSelection = false;\n        mode = 0;\n        // basic.showString(\"SENDER\");\n        basic.clearScreen();\n    }\n});\n\n// Handle Button B press for Mode 1\ninput.onButtonPressed(Button.B, function() {\n    if (modeSelection === true) {\n        basic.clearScreen();\n        modeSelection = false;\n        mode = 1;\n        // basic.showString(\"RECEIVER\");\n        basic.clearScreen();\n    }\n});\n\n// Prompt user for their desired mode.\nmodeSelect();\nbasic.clearScreen();\n\n// --------------------------------------------------------------------------------------------------------- //\n// Define variables, types etc.\n// --------------------------------------------------------------------------------------------------------- //\n\n/** The upper bound of the temperature before a warning appears to the user. */\nlet upperLimit: number | null = 25;\n/** The lower bound of the temperature before a warning appears to the user. */\nlet lowerLimit: number | null = 18;\n\n/** The temperature if received over radio from the sender Micro:bit. */\nlet receivedTemperature: number | null;\n/** Same as ``upperLimit``, but if received over radio. */\nlet receivedUpperLimit: number | null;\n/** Same as ``lowerLimit``, but if received over radio. */\nlet receivedLowerLimit: number | null;\n/** The average temperature of the receiver and sender Micro:bits. Only defined in Mode 1. */\nlet receivedAvgTemp: number | null;\n\n/**\n * Object to easily handle error messages by scope and code\n */\nconst errors = {\n    // Generic\n    generic: {\n        0: \"Unknown error occurred - please reset this Micro:bit\",\n        1: \"Unknown error occurred - error is recoverable, continuing execution\" // This ideally should not be shown to the user, only logged, or if neccessary shown in a more user-friendly way.\n    },\n    // Modes\n    mode: {\n        0: \"Value was received but mode was incorrect to perform operation (Mode 0)\",\n        1: \"Invalid values were received (Mode 1)\",\n        2: \"Data has not been received - please wait\"\n    },\n    func: {\n        0: \"Invalid values were received\"\n    }\n};\n\ntype ErrorMessage =\n    | (typeof errors)[\"mode\"][keyof typeof errors[\"mode\"]]\n    | (typeof errors)[\"generic\"][keyof typeof errors[\"generic\"]]\n    | (typeof errors)[\"func\"][keyof typeof errors[\"func\"]];\n\n/**\n *  Function to beep the Micro:bit.\n * \n *  All beeps should be the same, so this is here to stop custom beeps which would be confusing\n */\nfunction beep() {\n    music.tonePlayable(294, music.beat(BeatFraction.Whole)), music.PlaybackMode.UntilDone;\n}\n\ntype TemperatureWarningResult = {\n    message: string | null;\n    error: ErrorMessage | null;\n}\n\n/**\n *  Function to warn users of extreme temperatures.\n * \n *  **Temperature checking logic is not handled in this function.**\n * \n *  @param type The type of warning.\n */\nfunction temperatureWarning(type: \"lowerLimit\" | \"upperLimit\"): TemperatureWarningResult {\n    if (type !== \"lowerLimit\" || \"upperLimit\") {\n        datalogger.logData([\n            datalogger.createCV(\"isError\", true),\n            datalogger.createCV(\"Error\", errors.func[0])\n        ]);\n        return { message: null, error: errors.func[0] };\n    }\n    basic.clearScreen();\n    basic.showString(`TEMP ${type === \"lowerLimit\" ? \"LOW\" : \"HIGH\"}`);\n    // Play note once, wait one second, repeat 4 times\n    // Bit of a hacky solution, but it should work\n    beep();\n    for (let i = 0; i < 4; i++) {\n        beep();\n    }\n    return { message: \"Warned user of temperature\", error: null };\n}\n\n/**\n *  Function to send values through radio. Will be picked up by any receiving Micro:bit(s)\n */\nfunction sendRadioValues() {\n    radio.sendValue(\"temperature\", input.temperature());\n    radio.sendValue(\"upperLimit\", upperLimit);\n    radio.sendValue(\"lowerLimit\", lowerLimit);\n}\n\n// --------------------------------------------------------------------------------------------------------- //\n// Receiver Mode (Mode 1)\n// --------------------------------------------------------------------------------------------------------- //\n\n// When a radio value is received\nradio.onReceivedValue(function on_received_value(name: string, value: number) {\n    let allowedNames: { [key: string]: any } = [\"temperature\", \"upperLimit\", \"lowerLimit\"];\n    // If mode is 0 (i.e. send mode), silently fail and log the event.\n    if (mode == 0) {\n        datalogger.logData([\n            datalogger.createCV(\"isError\", true),\n            datalogger.createCV(\"Error\", errors.mode[0])\n        ]);\n        return;\n    }\n    \n    // If the mode is correct but the values are wrong, e.g. empty, then return an error to the user.\n    if (allowedNames[name] && (value == 0 || value == null || value == null)) {\n        // Log the error\n        datalogger.logData([\n            datalogger.createCV(\"isError\", true),\n            datalogger.createCV(\"Error\", errors.mode[1])\n        ]);\n        // Show an error to the user\n        basic.showLeds(`\n            . # # # .\n            . . . . #\n            . . # # .\n            . . . . .\n            . . # . .\n        `, 3000)\n        return\n    }\n\n    // Define values as they are received.\n    switch(name) {\n        case \"temperature\":\n            receivedTemperature = value;\n        case \"upperLimit\":\n            receivedUpperLimit = value;\n        case \"lowerLimit\":\n            receivedLowerLimit = value;\n        default:\n            break;\n    }\n\n    // If all values aren't defined, then show an error and don't continue.\n    if (!receivedTemperature || !receivedUpperLimit || !receivedLowerLimit) {\n        // Show the error to the user\n        basic.showString(errors.mode[2]);\n        // Log the error\n        datalogger.logData([\n            datalogger.createCV(\"isError\", true),\n            datalogger.createCV(\"Error\", errors.mode[2])\n        ]);\n    }\n\n    // Assuming all values are present and correct, the code continues.\n\n    // Show a warning depending on temperature\n    // High temperature\n    if (input.temperature() > receivedUpperLimit) {\n        temperatureWarning(\"upperLimit\");\n    }\n\n    // Low temperature\n    if (input.temperature() < receivedLowerLimit) {\n        temperatureWarning(\"lowerLimit\");\n    }\n\n    // Calculate average temperature\n    let avgTemp = (input.temperature() + receivedTemperature) / 2;\n    receivedAvgTemp = avgTemp;\n\n    // Show and log data\n    basic.showString(receivedAvgTemp.toString() || avgTemp.toString());\n    datalogger.logData([\n        datalogger.createCV(\"Temperature (°C) - Received\", receivedTemperature),\n        datalogger.createCV(\"Avg. Temperature (°C) - Received\", avgTemp),\n        datalogger.createCV(\"Upper Limit - Received\", receivedUpperLimit),\n        datalogger.createCV(\"Lower Limit - Received\", receivedLowerLimit),\n    ]);\n});\n\n// --------------------------------------------------------------------------------------------------------- //\n// Sender Mode (Mode 0)\n// --------------------------------------------------------------------------------------------------------- //\n\nbasic.forever(function on_forever() {\n    if (modeSelection === true) {\n        return;\n    }\n    if (mode === 0) {\n        // Encapsulated into a function so that it doesn't wait on the 5000ms delay\n        const mainLoop = () => {\n            basic.clearScreen();\n            basic.showString(input.temperature().toString());\n            if (input.temperature() < lowerLimit) {\n                temperatureWarning(\"lowerLimit\");\n            }\n            if (input.temperature() > upperLimit) {\n                temperatureWarning(\"upperLimit\");\n            }            \n        }\n        mainLoop();\n        basic.pause(5000);\n        sendRadioValues();\n    } else if (mode === 1) {\n        basic.showString(receivedAvgTemp.toString());\n        return;\n    }\n})\n\n// --------------------------------------------------------------------------------------------------------- //\n// Hydration reminder code\n//\n// IMPORTANT: This may get interrupted, due to how the Micro:bit runtime schedules tasks. \n// This function cannot be prioritised, so other functions or events like onRadioReceived may interrupt and cut it off early. \n// As far as I'm aware, there is no workaround to this, as it is inherently a Micro:bit limitation.\n// This is an unsolvable bug, without extensive modification of the underlying operating system's core scheduler, which is unfeasible.\n// --------------------------------------------------------------------------------------------------------- //\n\n/**\n * How many milliseconds have elapsed since this variable has been reset by `control.inBackground()` (see end of file).\n * \n * Updated and used by said function to run the hydration message exactly every hour.\n */\nlet timeElapsed: number = 0;\n\n// In the background, the following code is run\ncontrol.inBackground(() => {\n    // Count down to an hour (in milliseconds)\n    while (timeElapsed < 3600000) {\n        timeElapsed = timeElapsed + 1;\n    }\n    // When the elapsed time is an hour\n    while (timeElapsed >= 3600000) {\n        // Make sure we're not interrupting mode selection\n        if (modeSelection === true) {\n            return;\n        }\n        // Reset time elapsed\n        timeElapsed = 0;\n        // Show hydrate and beep 3 times, with five second pauses inbetween.\n        for (let index = 0; index < 3; index++) {\n            basic.clearScreen();\n            beep();\n            basic.showLeds(`\n                . . # . .\n                . # . # .\n                # . . . #\n                # . . . #\n                . # # # .\n            `)\n            basic.pause(5);\n        }\n        // Also log the current variables\n        if (mode === 0) {\n            datalogger.logData([\n                datalogger.createCV(\"Temperature (°C) - Input\", input.temperature()),\n                datalogger.createCV(\"Upper Limit - Input\", upperLimit),\n                datalogger.createCV(\"Lower Limit - Input\", lowerLimit),\n            ]);\n        } else if (mode === 1) {\n            datalogger.logData([\n                datalogger.createCV(\"Temperature (°C) - Received\", receivedTemperature),\n                datalogger.createCV(\"Avg. Temperature (°C) - Received\", receivedAvgTemp),\n                datalogger.createCV(\"Upper Limit - Received\", receivedUpperLimit),\n                datalogger.createCV(\"Lower Limit - Received\", receivedLowerLimit),\n            ]);\n        }\n        // Reset time elapsed again for good measure.\n        timeElapsed = 0;\n    }\n});","README.md":"","main.py":"# Mode 0 = send\n# Mode 1 = receive\n\ndef on_button_pressed_a():\n    basic.show_number(input.temperature())\ninput.on_button_pressed(Button.A, on_button_pressed_a)\n\ndef on_button_pressed_b():\n    basic.show_number(avg_temp)\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\ndef on_received_value(name, value):\n    global avg_temp\n    allowedNames = [\"temperature\", \"upperLimit\", \"lowerLimit\"]\n    if mode == 1:\n        basic.show_string(\"Invalid values received!\")\n        return\n    if allowedNames[name] and (value == 0 or value == None or value == None):\n        return\n    avg_temp += input.temperature() + value / 2\nradio.on_received_value(on_received_value)\n\navg_temp = 0\nmode = 0\nmode = 0\navg_temp = 0\nradio.set_group(21)\nradio.send_number(input.temperature())\n\ndef on_forever():\n    if input.temperature() > 30:\n        basic.show_string(\"!!!\")\n        music.play(music.tone_playable(294, music.beat(BeatFraction.WHOLE)),\n            music.PlaybackMode.UNTIL_DONE)\n        pins.digital_write_pin(DigitalPin.P1, 1)\n    elif input.temperature() < 3:\n        basic.show_string(\"!!!\")\n        music.play(music.tone_playable(294, music.beat(BeatFraction.WHOLE)),\n            music.PlaybackMode.UNTIL_DONE)\n        pins.digital_write_pin(DigitalPin.P1, 1)\n    else:\n        pins.digital_write_pin(DigitalPin.P1, 0)\nbasic.forever(on_forever)\n\ndef on_every_interval():\n    for index in range(3):\n        music._play_default_background(music.built_in_playable_melody(Melodies.BA_DING),\n            music.PlaybackMode.IN_BACKGROUND)\n        basic.show_string(\"DrinkWater\")\nloops.every_interval(3600000, on_every_interval)\n","pxt.json":"{\n    \"name\": \"ALT 4 Project - Temperature Sensor\",\n    \"description\": \"Project for LCCS ALT 4 - Temperature Sensor with additional features\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"radio-broadcast\": \"*\",\n        \"datalogger\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"stable8.0\",\n        \"tag\": \"v8.0.16\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/70751e3ce10c755c0c803f5669b12b52539ce5b0\",\n        \"target\": \"8.0.16\",\n        \"pxt\": \"12.0.16\"\n    },\n    \"preferredEditor\": \"tsprj\",\n    \"yotta\": {\n        \"config\": {\n            \"microbit-dal\": {\n                \"bluetooth\": {\n                    \"open\": 0,\n                    \"whitelist\": 1,\n                    \"security_level\": \"SECURITY_MODE_ENCRYPTION_NO_MITM\"\n                }\n            }\n        }\n    }\n}\n"}}],"shares":[{"id":"35923-40749-41861-87572","timestamp":1758889894700}],"lastSaveTime":1759146344465}